{"ast":null,"code":"var _jsxFileName = \"/Users/esuweld/Desktop/Main Studies/vidly-app/src/components/movieForm.jsx\";\nimport React from \"react\";\nimport Form from \"./common/form\";\nimport Joi from \"joi-browser\";\nimport { getGenres } from \"./services/fakeGenreService\";\nimport { getOneMovie, saveMovie } from \"./services/movieService\";\n\nclass MovieForm extends Form {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      id: \"\",\n      data: {\n        title: \"\",\n        genreId: \"\",\n        numberInStock: \"\",\n        dailyRentalRate: \"\"\n      },\n      genres: [],\n      errors: {}\n    };\n    this.schema = {\n      id: Joi.number(),\n      title: Joi.string().required().label(\"Title\"),\n      genreId: Joi.required().label(\"Genre\"),\n      numberInStock: Joi.number().required().min(0).max(100).label(\"Number in Stock\"),\n      dailyRentalRate: Joi.number().required().min(0).max(10).label(\"Daily Rental Rate\")\n    };\n\n    this.doSubmit = async () => {\n      const {\n        title,\n        genreId,\n        numberInStock,\n        dailyRentalRate\n      } = { ...this.state.data\n      };\n      const genreArray = this.state.genres.filter(g => g.id === 1);\n      const genre = {\n        id: genreId,\n        name: genreArray.name\n      };\n      let movie = {\n        title,\n        genre,\n        numberInStock,\n        dailyRentalRate\n      };\n      if (this.state.id) movie.id = this.state.id;\n      console.log(movie);\n\n      try {\n        await saveMovie(movie);\n      } catch (ex) {\n        if (ex.response && ex.response.status === 400) {\n          const errors = { ...this.state.errors\n          };\n          errors.username = ex.response.message;\n          this.setState({\n            errors\n          });\n        }\n\n        alert(\"something went wrong\");\n      }\n\n      this.props.history.push(\"/movies\");\n    };\n  }\n\n  async componentDidMount() {\n    const genres = getGenres();\n    this.setState({\n      genres\n    });\n    await this.populateMovie();\n  }\n\n  async populateMovie() {\n    try {\n      const movieId = this.props.match.params.id;\n      if (movieId === \"new\") return;\n      const {\n        data: movie\n      } = await getOneMovie(movieId);\n      this.setState({\n        id: movieId,\n        data: this.mapToViewModel(movie)\n      });\n    } catch (ex) {\n      if (ex.response && ex.response.status === 400) this.props.history.replace(\"/not-found\");\n    }\n  }\n\n  mapToViewModel(movie) {\n    return {\n      id: movie.id,\n      title: movie.title,\n      genreId: movie.genre.id,\n      numberInStock: movie.numberInStock,\n      dailyRentalRate: movie.dailyRentalRate\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, \"Movie Form\"), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }, this.renderInput(\"title\", \"Title\"), this.renderSelect(\"genreId\", \"Genre\", this.state.genres), this.renderInput(\"numberInStock\", \"Number in Stock\", \"number\"), this.renderInput(\"dailyRentalRate\", \"Rate\"), this.renderButton(\"Save\")));\n  }\n\n}\n\nexport default MovieForm;","map":{"version":3,"sources":["/Users/esuweld/Desktop/Main Studies/vidly-app/src/components/movieForm.jsx"],"names":["React","Form","Joi","getGenres","getOneMovie","saveMovie","MovieForm","state","id","data","title","genreId","numberInStock","dailyRentalRate","genres","errors","schema","number","string","required","label","min","max","doSubmit","genreArray","filter","g","genre","name","movie","console","log","ex","response","status","username","message","setState","alert","props","history","push","componentDidMount","populateMovie","movieId","match","params","mapToViewModel","replace","render","handleSubmit","renderInput","renderSelect","renderButton"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Form from \"./common/form\";\nimport Joi from \"joi-browser\";\nimport { getGenres } from \"./services/fakeGenreService\";\nimport { getOneMovie, saveMovie } from \"./services/movieService\";\n\nclass MovieForm extends Form {\n  state = {\n    id: \"\",\n    data: {\n      title: \"\",\n      genreId: \"\",\n      numberInStock: \"\",\n      dailyRentalRate: \"\",\n    },\n    genres: [],\n    errors: {},\n  };\n\n  schema = {\n    id: Joi.number(),\n    title: Joi.string().required().label(\"Title\"),\n    genreId: Joi.required().label(\"Genre\"),\n    numberInStock: Joi.number()\n      .required()\n      .min(0)\n      .max(100)\n      .label(\"Number in Stock\"),\n    dailyRentalRate: Joi.number()\n      .required()\n      .min(0)\n      .max(10)\n      .label(\"Daily Rental Rate\"),\n  };\n\n  async componentDidMount() {\n    const genres = getGenres();\n    this.setState({ genres });\n    await this.populateMovie();\n  }\n\n  async populateMovie() {\n    try {\n      const movieId = this.props.match.params.id;\n      if (movieId === \"new\") return;\n\n      const { data: movie } = await getOneMovie(movieId);\n\n      this.setState({ id: movieId, data: this.mapToViewModel(movie) });\n    } catch (ex) {\n      if (ex.response && ex.response.status === 400)\n        this.props.history.replace(\"/not-found\");\n    }\n  }\n\n  mapToViewModel(movie) {\n    return {\n      id: movie.id,\n      title: movie.title,\n      genreId: movie.genre.id,\n      numberInStock: movie.numberInStock,\n      dailyRentalRate: movie.dailyRentalRate,\n    };\n  }\n\n  doSubmit = async () => {\n    const { title, genreId, numberInStock, dailyRentalRate } = {\n      ...this.state.data,\n    };\n\n    const genreArray = this.state.genres.filter((g) => g.id === 1);\n    const genre = { id: genreId, name: genreArray.name };\n\n    let movie = {\n      title,\n      genre,\n      numberInStock,\n      dailyRentalRate,\n    };\n    if (this.state.id) movie.id = this.state.id;\n    console.log(movie);\n    try {\n      await saveMovie(movie);\n    } catch (ex) {\n      if (ex.response && ex.response.status === 400) {\n        const errors = { ...this.state.errors };\n        errors.username = ex.response.message;\n        this.setState({ errors });\n      }\n      alert(\"something went wrong\");\n    }\n\n    this.props.history.push(\"/movies\");\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Movie Form</h1>\n        <form onSubmit={this.handleSubmit}>\n          {this.renderInput(\"title\", \"Title\")}\n          {this.renderSelect(\"genreId\", \"Genre\", this.state.genres)}\n          {this.renderInput(\"numberInStock\", \"Number in Stock\", \"number\")}\n          {this.renderInput(\"dailyRentalRate\", \"Rate\")}\n          {this.renderButton(\"Save\")}\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default MovieForm;\n"]},"metadata":{},"sourceType":"module"}