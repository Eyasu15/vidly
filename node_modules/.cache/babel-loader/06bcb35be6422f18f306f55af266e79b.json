{"ast":null,"code":"var _jsxFileName = \"/Users/esuweld/Desktop/Main Studies/vidly-app/vidly/src/components/movies.jsx\";\nimport React, { Component } from \"react\";\nimport { getMovies } from \"./services/fakeMovieService\";\nimport Pagination from \"./pagination\";\nimport { paginate } from \"./utils/paginate\";\nimport Genres from \"./genres\";\nimport { getGenres } from \"./services/fakeGenreService\";\nimport MoviesTable from \"./moviesTable\";\nimport _ from \"lodash\";\n\nclass Movies extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movies: [],\n      pageSize: 4,\n      activePage: 1,\n      genres: [],\n      activeGenre: \"All Genres\",\n      sortColumn: {\n        path: \"title\",\n        order: \"asc\"\n      }\n    };\n\n    this.handleDelete = movie => {\n      let movies = [...this.state.movies];\n      movies = movies.filter(m => m._id !== movie._id);\n      this.setState({\n        movies\n      });\n    };\n\n    this.handleLike = movie => {\n      const movies = [...this.state.movies];\n      const index = movies.indexOf(movie);\n      movies[index] = { ...movies[index]\n      };\n      movies[index].liked = !movies[index].liked;\n      this.setState({\n        movies\n      });\n    };\n\n    this.handlePageChange = pageNumber => {\n      this.setState({\n        activePage: pageNumber\n      });\n    };\n\n    this.handleGenreChange = genre => {\n      this.setState({\n        activeGenre: genre.name\n      });\n    };\n\n    this.handleSort = path => {\n      let sortColumn = { ...this.state.sortColumn\n      };\n      if (sortColumn.path === path) sortColumn.order = sortColumn.order === \"asc\" ? \"desc\" : \"asc\";else {\n        sortColumn.path = path;\n        sortColumn.order = \"asc\";\n      }\n      this.setState({\n        sortColumn\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      movies: getMovies(),\n      genres: getGenres()\n    });\n  }\n\n  render() {\n    let {\n      length: count\n    } = this.state.movies;\n    let {\n      pageSize,\n      activePage,\n      movies: allMovies,\n      activeGenre,\n      sortColumn\n    } = this.state;\n    let filtered = activeGenre !== \"All Genres\" ? allMovies.filter(movie => movie.genre.name === activeGenre) : allMovies;\n    count = filtered.length;\n\n    let sorted = _.sortBy(filtered, [sortColumn.path], [sortColumn.order]);\n\n    let movies = paginate(sorted, pageSize, activePage);\n    if (count < 1) return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 27\n      }\n    }, \"There are no movies in the database\");\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Genres, {\n      genres: getGenres(),\n      activeGenre: this.state.activeGenre,\n      onGenreChange: this.handleGenreChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }, \"Showing \", count, \" movies\"), /*#__PURE__*/React.createElement(MoviesTable, {\n      movies: movies,\n      onLike: this.handleLike,\n      onDelete: this.handleDelete,\n      onSort: this.handleSort,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Pagination, {\n      itemsCount: count,\n      pageSize: pageSize,\n      activePage: activePage,\n      onPageChange: this.handlePageChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default Movies;","map":{"version":3,"sources":["/Users/esuweld/Desktop/Main Studies/vidly-app/vidly/src/components/movies.jsx"],"names":["React","Component","getMovies","Pagination","paginate","Genres","getGenres","MoviesTable","_","Movies","state","movies","pageSize","activePage","genres","activeGenre","sortColumn","path","order","handleDelete","movie","filter","m","_id","setState","handleLike","index","indexOf","liked","handlePageChange","pageNumber","handleGenreChange","genre","name","handleSort","componentDidMount","render","length","count","allMovies","filtered","sorted","sortBy"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { getMovies } from \"./services/fakeMovieService\";\nimport Pagination from \"./pagination\";\nimport { paginate } from \"./utils/paginate\";\nimport Genres from \"./genres\";\nimport { getGenres } from \"./services/fakeGenreService\";\nimport MoviesTable from \"./moviesTable\";\nimport _ from \"lodash\";\n\nclass Movies extends Component {\n  state = {\n    movies: [],\n    pageSize: 4,\n    activePage: 1,\n    genres: [],\n    activeGenre: \"All Genres\",\n    sortColumn: { path: \"title\", order: \"asc\" },\n  };\n\n  componentDidMount() {\n    this.setState({ movies: getMovies(), genres: getGenres() });\n  }\n\n  handleDelete = (movie) => {\n    let movies = [...this.state.movies];\n    movies = movies.filter((m) => m._id !== movie._id);\n    this.setState({ movies });\n  };\n\n  handleLike = (movie) => {\n    const movies = [...this.state.movies];\n    const index = movies.indexOf(movie);\n    movies[index] = { ...movies[index] };\n    movies[index].liked = !movies[index].liked;\n    this.setState({ movies });\n  };\n\n  handlePageChange = (pageNumber) => {\n    this.setState({ activePage: pageNumber });\n  };\n\n  handleGenreChange = (genre) => {\n    this.setState({ activeGenre: genre.name });\n  };\n\n  handleSort = (path) => {\n    let sortColumn = { ...this.state.sortColumn };\n\n    if (sortColumn.path === path)\n      sortColumn.order = sortColumn.order === \"asc\" ? \"desc\" : \"asc\";\n    else {\n      sortColumn.path = path;\n      sortColumn.order = \"asc\";\n    }\n\n    this.setState({ sortColumn });\n  };\n\n  render() {\n    let { length: count } = this.state.movies;\n    let {\n      pageSize,\n      activePage,\n      movies: allMovies,\n      activeGenre,\n      sortColumn,\n    } = this.state;\n\n    let filtered =\n      activeGenre !== \"All Genres\"\n        ? allMovies.filter((movie) => movie.genre.name === activeGenre)\n        : allMovies;\n\n    count = filtered.length;\n\n    let sorted = _.sortBy(filtered, [sortColumn.path], [sortColumn.order]);\n\n    let movies = paginate(sorted, pageSize, activePage);\n\n    if (count < 1) return <p>There are no movies in the database</p>;\n\n    return (\n      <div className=\"row\">\n        <div className=\"col-3\">\n          <Genres\n            genres={getGenres()}\n            activeGenre={this.state.activeGenre}\n            onGenreChange={this.handleGenreChange}\n          />\n        </div>\n        <div className=\"col\">\n          <p>Showing {count} movies</p>\n          <MoviesTable\n            movies={movies}\n            onLike={this.handleLike}\n            onDelete={this.handleDelete}\n            onSort={this.handleSort}\n          />\n          <Pagination\n            itemsCount={count}\n            pageSize={pageSize}\n            activePage={activePage}\n            onPageChange={this.handlePageChange}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Movies;\n"]},"metadata":{},"sourceType":"module"}